package openshift

import (
	"os"
	"path/filepath"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/templates/content"
)

const (
	machineConfigMountDeviceFileName = "99_mount-device.yaml.template"
)

var _ asset.WritableAsset = (*MachineConfigMountDevice)(nil)

// MachineConfigMountDevice is the variable to represent contents of corresponding files.
type MachineConfigMountDevice struct {
	FileList []*asset.File
}

// Dependencies returns all of the dependencies directly needed by the asset.
func (t *MachineConfigMountDevice) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

// Name returns the human-friendly name of the asset.
func (t *MachineConfigMountDevice) Name() string {
	return "MachineConfigMountDevice"
}

// Generate generates the actual files by this asset.
func (t *MachineConfigMountDevice) Generate(parents asset.Parents) error {
	t.FileList = []*asset.File{}

	for _, fileName := range []string{
		machineConfigMountDeviceFileName,
	} {
		data, err := content.GetOpenshiftTemplate(fileName)
		if err != nil {
			return err
		}
		t.FileList = append(t.FileList, &asset.File{
			Filename: filepath.Join(content.TemplateDir, fileName),
			Data:     data,
		})
	}
	return nil
}

// Files returns the files generated by the asset.
func (t *MachineConfigMountDevice) Files() []*asset.File {
	return t.FileList
}

// Load returns the asset from disk.
func (t *MachineConfigMountDevice) Load(f asset.FileFetcher) (bool, error) {
	t.FileList = []*asset.File{}

	for _, fileName := range []string{
		machineConfigMountDeviceFileName,
	} {
		file, err := f.FetchByName(filepath.Join(content.TemplateDir, fileName))
		if err != nil {
			if os.IsNotExist(err) {
				return false, nil
			}
			return false, err
		}
		t.FileList = append(t.FileList, file)
	}

	return true, nil
}
